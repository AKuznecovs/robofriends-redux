{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/Header.js","components/SearchBox.js","components/ErrorBoundry.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","name","email","id","className","alt","src","CardList","map","user","i","key","Header","nextProps","nextState","Component","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundry","props","state","hasError","info","this","setState","children","Scroll","style","overflowY","border","height","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b6309849.chunk.js","sourcesContent":["import {\n   CHANGE_SEARCH_FIELD,\n   REQUEST_ROBOTS_PENDING,\n   REQUEST_ROBOTS_SUCCESS,\n   REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\n// STATE\nconst initialStateSearch = {\n   searchField: ''\n}\n\n//REDUCER\nexport const searchRobots = ( state = initialStateSearch, action = {} ) => {\n   // console.log(action.type);\n   switch(action.type) {\n      case CHANGE_SEARCH_FIELD:\n         return Object.assign( {}, state, { searchField: action.payload } );\n      default:\n         return state;\n   }\n}\n\nconst initialStateRobots = {\n   isPending: false,\n   robots: [],\n   error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n   switch(action.type) {\n      case REQUEST_ROBOTS_PENDING:\n         return Object.assign({}, state, { isPending: true });\n      case REQUEST_ROBOTS_SUCCESS:\n         return Object.assign({}, state, { robots: action.payload, isPending: false });\n      case REQUEST_ROBOTS_FAILED:\n         return Object.assign({}, state, { error: action.payload, isPending: false });\n      default:\n         return state;\n   }\n}","import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React, { Component } from 'react';\n\nclass Header extends Component {\n   shouldComponentUpdate(nextProps, nextState) {\n      return false;\n   }\n   render() {\n      return <h1 className='f1 white'>RoboFriends</h1> \n   }\n}\n\nexport default Header;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\ttype='search' \n\t\t\tplaceholder='search robots'\n\t\t\tonChange={searchChange} \n\t\t\t/>\n\t\t</div>\n\t\t);\n}\n\nexport default SearchBox;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         hasError: false\n      }\n   }\n\n   componentDidCatch(error, info) {\n      this.setState({hasError: true})\n   }\n\n   render() {\n      if (this.state.hasError) {\n         return <h1>Oooops. That is not good.</h1>\n      }\n      return this.props.children\n   }\n}\n\nexport default ErrorBoundry;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border: '3px solid black', height: '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t\t)\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\n\nimport CardList from '../components/CardList';\nimport Header from '../components/Header';\nimport SearchBox from '../components/SearchBox';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Scroll from '../components/Scroll';\n\n\n// parameter state comes from index.js provider store state(rootReducers)\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\n\nclass App extends Component {\n\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender() {\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\n\t\tconst filteredRobots = robots.filter(robot =>{\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\t\treturn isPending ?\n\t\t<h1> Loading... </h1> :\n\t\t(\n\t\t\t<div className='tc'>\n\t\t\t\t<Header />\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// action done from mapDispatchToProps will change state from mapStateToProps\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n// connect() is a highier order function that returns another function","import { \n   CHANGE_SEARCH_FIELD,\n   REQUEST_ROBOTS_PENDING,\n   REQUEST_ROBOTS_SUCCESS,\n   REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n   type: CHANGE_SEARCH_FIELD,\n   payload: text\n})\n\n// export const setSearchField = (text) => {\n//    console.log(text);\n//    return {\n//       type: CHANGE_SEARCH_FIELD,\n//       payload: text\n//    }\n// }\n\nexport const requestRobots = () => (dispatch) => {\n   dispatch({ type: REQUEST_ROBOTS_PENDING });\n   fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n   }","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobots, requestRobots } from './reducers';\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nimport './index.css';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\n// const store = createStore(rootReducer);\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n               <Provider store={store}>\n                  <App />\n               </Provider>, \n               document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}