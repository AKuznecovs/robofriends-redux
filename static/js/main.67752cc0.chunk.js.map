{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/CounterButton.js","components/Header.js","components/SearchBox.js","components/ErrorBoundry.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","name","email","id","className","alt","src","CardList","map","user","i","key","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","color","props","onClick","Component","Header","SearchBox","searchChange","aria-label","type","placeholder","onChange","ErrorBoundry","hasError","info","children","Scroll","style","overflowY","border","height","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.67752cc0.chunk.js","sourcesContent":["import {\n   CHANGE_SEARCH_FIELD,\n   REQUEST_ROBOTS_PENDING,\n   REQUEST_ROBOTS_SUCCESS,\n   REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\n// STATE\nconst initialStateSearch = {\n   searchField: ''\n}\n\n//REDUCER\nexport const searchRobots = ( state = initialStateSearch, action = {} ) => {\n   // console.log(action.type);\n   switch(action.type) {\n      case CHANGE_SEARCH_FIELD:\n         return Object.assign( {}, state, { searchField: action.payload } );\n      default:\n         return state;\n   }\n}\n\nconst initialStateRobots = {\n   isPending: false,\n   robots: [],\n   error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n   switch(action.type) {\n      case REQUEST_ROBOTS_PENDING:\n         return Object.assign({}, state, { isPending: true });\n      case REQUEST_ROBOTS_SUCCESS:\n         return Object.assign({}, state, { robots: action.payload, isPending: false });\n      case REQUEST_ROBOTS_FAILED:\n         return Object.assign({}, state, { error: action.payload, isPending: false });\n      default:\n         return state;\n   }\n}","import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React, { Component } from 'react';\n// import React, { PureComponent } from 'react';\n\nclass CounterButton extends Component {\n// class CounterButton extends Pureomponent {\n// updates Component only when props or state changed\n   constructor() {\n      super();\n      this.state = {\n         count: 0\n      }\n   }\n\n   shouldComponentUpdate(nextProps, nextState) {\n      if ( this.state.count !== nextState.count) {\n         return true;\n      }\n      return false;\n   }\n\n   updateCount = () => {\n      this.setState(state => {\n         return {count: state.count + 1}\n         })\n   }\n\n   render() {\n      return (\n         <button color={this.props.color} onClick={this.updateCount}>\n            Count: {this.state.count}\n         </button>\n      )\n   }\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n   shouldComponentUpdate(nextProps, nextState) {\n      return false;\n   }\n\n   render() {\n      return (\n      <div>\n         <h1 className='f1 white'>RoboFriends</h1> \n         <CounterButton color={ 'red' }/>\n      </div>\n      )\n   }\n}\n\nexport default Header;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\taria-label='Search Robots'\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\ttype='search' \n\t\t\tplaceholder='search robots'\n\t\t\tonChange={searchChange} \n\t\t\t/>\n\t\t</div>\n\t\t);\n}\n\nexport default SearchBox;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         hasError: false\n      }\n   }\n\n   componentDidCatch(error, info) {\n      this.setState({hasError: true})\n   }\n\n   render() {\n      if (this.state.hasError) {\n         return <h1>Oooops. That is not good.</h1>\n      }\n      return this.props.children\n   }\n}\n\nexport default ErrorBoundry;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border: '3px solid black', height: '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t\t)\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\n\nimport CardList from '../components/CardList';\nimport Header from '../components/Header';\nimport SearchBox from '../components/SearchBox';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Scroll from '../components/Scroll';\n\n\n// parameter state comes from index.js provider store state(rootReducers)\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\n\nclass App extends Component {\n\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender() {\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\n\t\tconst filteredRobots = robots.filter(robot =>{\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\t\treturn (\n\t\t\t<div className='tc'>\n\t\t\t\t<Header />\n\t\t\t\t<SearchBox searchChange={onSearchChange} />\n\t\t\t\t<Scroll>\n\t\t\t\t\t{isPending ? <h1>Loading...</h1> :\n\t\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t\t}\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// action done from mapDispatchToProps will change state from mapStateToProps\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n// connect() is a highier order function that returns another function","import { \n   CHANGE_SEARCH_FIELD,\n   REQUEST_ROBOTS_PENDING,\n   REQUEST_ROBOTS_SUCCESS,\n   REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n   type: CHANGE_SEARCH_FIELD,\n   payload: text\n})\n\n// export const setSearchField = (text) => {\n//    console.log(text);\n//    return {\n//       type: CHANGE_SEARCH_FIELD,\n//       payload: text\n//    }\n// }\n\nexport const requestRobots = () => (dispatch) => {\n   dispatch({ type: REQUEST_ROBOTS_PENDING });\n   fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n   }","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobots, requestRobots } from './reducers';\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nimport './index.css';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n               <Provider store={store}>\n                  <App />\n               </Provider>, \n               document.getElementById('root'));\n               \nserviceWorker.register();\n"],"sourceRoot":""}